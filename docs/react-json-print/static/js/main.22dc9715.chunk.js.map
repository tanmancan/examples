{"version":3,"sources":["react-json-print/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DataType","ExpandState","TreeContext","createContext","maxDepth","expandedTreeState","CLOSED","getDataList","data","dataType","currentDepth","dataKey","computedCurrentDepth","OBJECT","dataObject","Object","entries","map","key","value","computedKey","objectKey","ARRAY","idx","ReactJsonPrint","props","expanded","depth","useContext","initExpandedState","OPENED","useState","expandedState","setExpandedState","dataString","JSON","parse","error","message","getData","NULL","undefined","Array","isArray","STRING","NUMBER","BOOLEAN","UNDEFINED","getDataType","dataValue","length","keys","getDataValue","dataTypeClass","join","dataHandleClass","dataListItemsClass","TopLevelList","useMemo","Provider","className","NestedList","onClick","e","preventDefault","newState","dataValueClass","push","defaultProps","styleApp","fontFamily","App","style","exampleJson","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22dc9715.chunk.js","sourcesContent":["// eslint-disable-next-line\nimport * as React from 'react';\nimport {\n  useState,\n  MouseEvent,\n  useContext,\n  createContext,\n  useMemo,\n} from 'react';\nimport './styles.css';\n\ntype DataObject = string | boolean | null | number | object | DataObject[];\n\ntype DataKey = string | number;\n\ninterface ReactJsonPrintProps {\n  /**\n   * The data to be printed. Can be primitives, objects, or arrays.\n   * All values must be valid JSON types and all object keys\n   * must be valid JSON type. (ie. `string` not `Symbol`);\n   *\n   * @default null\n   */\n  dataObject?: DataObject;\n  /**\n   * The data to be printed, provided as a valid JSON string.\n   * The string will be parsed via `JSON.parse`. If both `dataString` and `dataObject`\n   * are provided, the `dataObject` value will be used.\n   *\n   * @default undefined\n   */\n  dataString?: string;\n  /**\n   * Key for current data value\n   *\n   * @default 'DATA'\n   */\n  objectKey?: DataKey;\n  /**\n   * Displays the entire tree in an expanded state.\n   * By default all nested nodes in the tree are collapsed.\n   *\n   * @default undefined\n   */\n  expanded?: boolean;\n  /**\n   * Limits how many levels deep to display child nodes.\n   * Value of `0` will print all child nodes. Useful for deeply nested data,\n   * when you want to limit the number of node displayed.\n   *\n   * @default 0\n   */\n  depth?: number;\n  /**\n   * Current node depth.\n   * Internal use only\n   *\n   * @default undefined\n   */\n  currentDepth?: number;\n  /**\n   * Unique key for a rendered list of elements.\n   * Internal use only.\n   *\n   * @default undefined\n   */\n  dataKey?: string;\n};\n\nenum DataType {\n  ARRAY = 'array',\n  OBJECT = 'object',\n  STRING = 'string',\n  NUMBER = 'number',\n  BOOLEAN = 'boolean',\n  NULL = 'null',\n  UNDEFINED = 'undefined',\n}\n\nenum ExpandState {\n  OPENED = 'opened',\n  CLOSED = 'closed',\n}\n\nconst TreeContext = createContext({\n  maxDepth: 0,\n  expandedTreeState: ExpandState.CLOSED,\n});\n\nconst getData = (props: ReactJsonPrintProps): DataObject => {\n  const { dataObject, dataString } = props;\n  if (typeof dataObject === 'boolean') return dataObject;\n  if (dataObject) {\n    return dataObject;\n  }\n  if (dataString) {\n    try {\n      return JSON.parse(dataString);\n    } catch (error) {\n      return `ERROR: ${error.message}`;\n    }\n  }\n  return null;\n};\n\nconst getDataType = (data: DataObject): DataType => {\n  if (data === null) return DataType.NULL;\n\n  if (\n    data !== null\n    && data !== undefined\n    && !Array.isArray(data)\n    && typeof data === 'object'\n  ) return DataType.OBJECT;\n\n  if (Array.isArray(data)) return DataType.ARRAY;\n\n  if (typeof data === 'string') return DataType.STRING;\n\n  if (typeof data === 'number') return DataType.NUMBER;\n\n  if (typeof data === 'boolean') return DataType.BOOLEAN;\n\n  return DataType.UNDEFINED;\n};\n\nconst getDataValue = (data: DataObject, dataType: DataType): DataObject => {\n  switch (dataType) {\n    case DataType.BOOLEAN: {\n      return `${data}`;\n    }\n    case DataType.NULL: {\n      return 'null';\n    }\n    case DataType.ARRAY: {\n      const dataArray = data as Array<DataObject>;\n      return `Array[${dataArray.length}]`\n    }\n    case DataType.OBJECT: {\n      const dataObject = data as object;\n      const objectLength: number = Object.keys(dataObject).length;\n      return objectLength\n        ? 'Object'\n        : 'Object (empty)';\n    }\n    case DataType.UNDEFINED: {\n      return 'undefined';\n    }\n    default:\n      return data;\n  }\n}\n\nconst getDataList = (\n  data: DataObject,\n  dataType: DataType,\n  currentDepth: number | undefined,\n  dataKey: string,\n): Array<JSX.Element> | null => {\n  const computedCurrentDepth = currentDepth || currentDepth === 0\n    ? currentDepth + 1\n    : 0;\n  switch (dataType) {\n    case DataType.OBJECT: {\n      const dataObject = data as object;\n      return Object.entries(dataObject)\n        .map(([key, value]: [DataKey, DataObject]) => {\n          const computedKey: string = `${dataKey}-${key}-${computedCurrentDepth}`;\n          return (\n            <ReactJsonPrint\n              key={computedKey}\n              dataObject={value}\n              objectKey={key}\n              currentDepth={computedCurrentDepth}\n              dataKey={computedKey}\n            />\n          )});\n    }\n    case DataType.ARRAY: {\n      const dataArray = data as Array<DataObject>;\n      return dataArray.map((value: DataObject, idx: DataKey) => {\n        const computedKey: string = `${dataKey}-${idx}-${computedCurrentDepth}`;\n        return (\n          <ReactJsonPrint\n            key={computedKey}\n            dataObject={value}\n            objectKey={idx}\n            currentDepth={computedCurrentDepth}\n            dataKey={computedKey}\n          />\n      )})\n    }\n    default:\n      return null;\n  }\n}\n\nconst ReactJsonPrint: React.FunctionComponent<ReactJsonPrintProps> = (props: ReactJsonPrintProps) => {\n  const {\n    expanded,\n    depth,\n    currentDepth,\n    dataKey,\n    objectKey,\n  } = props;\n\n  const { expandedTreeState, maxDepth } = useContext(TreeContext);\n  const initExpandedState: ExpandState = expanded || expandedTreeState === ExpandState.OPENED\n    ? ExpandState.OPENED\n    : ExpandState.CLOSED\n  const [expandedState, setExpandedState] = useState(initExpandedState);\n\n  const data: DataObject = getData(props);\n  const dataType: DataType = getDataType(data);\n  const dataValue: DataObject = getDataValue(data, dataType);\n\n  const computedKey: string = dataKey\n    ? `${dataKey}`\n    : `${objectKey}`;\n\n  /**\n   * Toggles the nested node collapse state.\n   *\n   * @param e MouseEvent\n   */\n  const onHandleClick = (e: MouseEvent): void => {\n    e.preventDefault();\n\n    const newState: ExpandState = expandedState === ExpandState.OPENED\n      ? ExpandState.CLOSED\n      : ExpandState.OPENED;\n\n    setExpandedState(newState);\n  }\n\n  /**\n   * Data type classes\n   */\n  const dataTypeClass: string = [\n    'data__type',\n    `data__type--${dataType}`,\n    `data__type--${expandedState}`\n  ].join(' ');\n\n  /**\n   * Wrapper class for top level key. Can contain a handle if there is a list.\n   */\n  const dataHandleClass: string = dataType === DataType.ARRAY || dataType === DataType.OBJECT\n    ? ['data__list-handle', `data__list-handle--${expandedState}`].join(' ')\n    : 'data__no-list';\n\n  /**\n   * Classes for the data list wrapper\n   */\n  const dataListItemsClass: string = [\n    'data__list-items',\n    `data__list-items--${expandedState}`\n  ].join(' ');\n\n  /**\n   * Dynamically create classes for the data value wrapper\n   */\n  const dataValueClass = (): string => {\n    const dataValueClass = [\n      'data__value',\n    ];\n\n    if (dataType !== DataType.OBJECT && dataType !== DataType.ARRAY) {\n      dataValueClass.push(\n        'data__value--primitive',\n        `data__value--${dataType}`,\n      );\n    }\n\n    if (dataType === DataType.ARRAY) {\n      dataValueClass.push(\n        'data__value--array',\n      );\n    }\n\n    if (dataType === DataType.OBJECT) {\n      dataValueClass.push(\n        'data__value--object',\n      );\n    }\n\n    return dataValueClass.join(' ');\n  };\n\n  /**\n   * Wraps context provider only around top level nodes.\n   * We then pass in global state for depth and expanded to all child nodes.\n   */\n  const TopLevelList: JSX.Element = useMemo(() => (\n    <TreeContext.Provider value={{\n      expandedTreeState: expanded\n        ? ExpandState.OPENED\n        : ExpandState.CLOSED,\n      maxDepth: depth as number,\n    }}>\n      {\n        dataType === DataType.OBJECT || dataType === DataType.ARRAY\n          ? (\n            <div className={dataListItemsClass}>\n              {getDataList(data, dataType, 1, computedKey)}\n            </div>\n          )\n          : null\n      }\n    </TreeContext.Provider>\n    // Prevents children from re-rendering when parent ExpandState is changed.\n  ), [computedKey, data, dataListItemsClass, dataType, depth, expanded]);\n\n  /**\n   * Children nodes that may be hidden if depth is set\n   */\n  const NestedList: JSX.Element | null = useMemo(() => (dataType === DataType.OBJECT || dataType === DataType.ARRAY\n    ? (\n      <div className={dataListItemsClass}>\n        {maxDepth !== 0 && currentDepth as number > maxDepth\n          ? (<div>...</div>)\n          : getDataList(data, dataType, currentDepth, computedKey)}\n      </div>\n    )\n    : null\n    // Prevents children from re-rendering when parent ExpandState is changed.\n  ), [computedKey, currentDepth, data, dataListItemsClass, dataType, maxDepth]);\n\n  return (\n    <div className={dataTypeClass}>\n      <span\n        className={dataHandleClass}\n        onClick={onHandleClick}\n      >\n        <span className=\"data__key\">\n          {objectKey}\n        </span>\n        <span className={dataValueClass()}>{dataValue}</span>\n      </span>\n      { currentDepth === undefined\n        ? <>{ TopLevelList }</>\n        : <>{ NestedList }</>}\n\n    </div>\n  );\n};\n\nReactJsonPrint.defaultProps = {\n  dataObject: null,\n  dataString: undefined,\n  objectKey: 'DATA',\n  expanded: undefined,\n  depth: 0,\n  currentDepth: undefined,\n  dataKey: undefined,\n};\n\nexport default ReactJsonPrint;\n","import React from 'react';\nimport ReactJsonPrint from './react-json-print';\nimport exampleJson from './example.json';\n\nconst styleApp = {\n  fontFamily: 'sans-serif',\n};\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\" style={styleApp}>\n      <h1>React JSON Print</h1>\n      <h2>Limits output to 1 nested nodes</h2>\n      <ReactJsonPrint dataObject={exampleJson} depth={1}></ReactJsonPrint>\n      <pre>{JSON.stringify(exampleJson, null, ' ')}</pre>\n      <h2>Prints all nodes as expanded</h2>\n      <ReactJsonPrint expanded dataString={JSON.stringify(exampleJson)}></ReactJsonPrint>\n      <pre>{JSON.stringify(exampleJson, null, ' ')}</pre>\n      <h2>Uses a JSON string value</h2>\n      <ReactJsonPrint dataObject={exampleJson}></ReactJsonPrint>\n      <pre>{JSON.stringify(exampleJson, null, ' ')}</pre>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}